# Using syslog input, NOT filebeat cloudfoundry module

input {
    tcp {
        port => 9000
        type => syslog
        codec => plain {
        charset => "ISO-8859-1"
        }
    }
}
filter {
    mutate {
        add_field =>  { 
            "logstash_host" => "int-logstash-main-node-1" 
        }
    }
    if [type] == "syslog" {
        mutate {
            gsub => ["message", "_NEWLINE_", "\n"]
        }

        grok {
            match => {"message" => "%{SYSLOG5424PRI}%{NONNEGINT:syslog5424_ver} +(?:%{TIMESTAMP_ISO8601:syslog5424_ts}|-) +(?:%{HOSTNAME:syslog5424_host}|-) +(?:%{NOTSPACE:syslog5424_app}|-) +(?:%{NOTSPACE:syslog5424_proc}|-) +(?:%{WORD:syslog5424_msgid}|-) +(?:%{SYSLOG5424SD:syslog5424_sd}|-|) +%{GREEDYDATA:syslog5424_msg}"}
            # Workaround for rfc1034 PCF foundation violation ref CLOUD-10907
            pattern_definitions => {
                HOSTNAME => "\b(?:[0-9A-Za-z][_0-9A-Za-z-]{0,62})(?:\.(?:[0-9A-Za-z][_0-9A-Za-z-]{0,62}))*(\.?|\b)"
            }
        }

        if [syslog5424_app] == "dd-agent" {
            drop {}
        }

        if [syslog5424_host] =~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/ {
            mutate { add_tag => ["pcf_platform_logs"] }
        }

        syslog_pri {}

        date {
            match => ["syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss"]
        }

        if [syslog5424_msg] =~ "\A\{.+\}\z" {
            json {
                source => "syslog5424_msg"
            }
            # mutate {remove_field => ["syslog5424_msg"] }
        }

        if [syslog5424_host] {
            dissect {
                mapping => {"syslog5424_host" => "%{clgx_pcf_org}.%{clgx_pcf_space}.%{clgx_pcf_app}"}
            }
        }

        if [syslog5424_sd] {
            grok {
                match => {"syslog5424_sd" => '\[%{NOTSPACE:objectid} %{GREEDYDATA:rest}]'}
            }

            # Parse the KVs at the end
            kv {
                source => "rest"
                field_split => " "
                value_split => "="
                trim_value => "\""
                target => "sd"
            }


            # Cleanup a bit
            mutate {
                remove_field => ["rest", "syslog5424_sd"]
            }
        }
        # Parse for the Router Logs
        if "RTR" in [syslog5424_proc] {
            grok {
                match => {"syslog5424_msg" => "%{HOSTNAME:hostname} - \[%{TIMESTAMP_ISO8601:http_request_timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} %{NUMBER:other_code} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} \"%{HOSTPORT:host1}\" \"%{HOSTPORT:host2}\" %{GREEDYDATA:message_detail_2}"}
            }

            # Parse the KVs at the end
            kv {
                source => "message_detail_2"
                value_split => ":"
            }

            # Go ahead and parse the user agent
            useragent {
                source => "agent"
            }

            # Cleanup a bit
            #   mutate{
            #    remove_field => ["syslog5424_msg", "message_detail_2", "message"]
            #}

            mutate {
                convert => {
                    "response" => "integer"
                    "byte" => "float"
                    "response_time" => "float"
                }
            }
        }

        mutate {
            remove_field => ["log_level", "timestamp", "syslog_hostname", "syslog_message", "syslog_timestamp"]
        }
    }

    # Identify flood messages from syslog format
    #if (([cloudfoundry][app][name] =~ /(?i)(fcws|flood)/ ) and ([cloudfoundry][org][name] =~ /(?i)flood/)) {
    #  syslog format
    if (([sd][app_name] =~ /(?i)(fcws|flood)/ ) and ([sd][organization_name] =~ /(?i)flood/)) {
        mutate {
            add_field =>  { "[organization][name]" => "flood_us" }
        }
    }
}
output {
    if [organization][name]=="flood_us" {
        pipeline { send_to => "main-pcf-int-logs-filter-output-pipeline-flood_us" }
    } else {
        pipeline { send_to => "main-pcf-int-logs-output-pipeline-default" }
    }
}

