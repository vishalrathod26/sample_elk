input {
     pipeline { 
        address => "gen1-beat-int-logs-filter-output-pipeline-tax_us"
        id => "gen1-beat-int-logs-filter-output-pipeline-tax_us"
    }
}

filter {
# TEST TO CONFIRM INGEST PROCESSING
    if [@metadata][pipeline] {
        mutate {
            add_field => { "ingest_pipeline" => "%{[@metadata][pipeline]}"  }
        }
    }

#
# Tax logs
#

	mutate {
         strip => ["message"]
    }
  # WebLogic Server Http Access Log
    if "weblogic-access-log" in [tags] {
        grok {
            match => { "message" => '%{SPACE}%{IP:client.ip}%{SPACE}-%{SPACE}-%{SPACE}\[%{HTTPDATE:httpdate}\]%{SPACE}"(?:%{WORD:http.request.method} %{NOTSPACE:url.path}(?: HTTP/%{NUMBER:http.version})?|%{DATA:rawrequest})"%{SPACE}%{INT:http.response.status_code}%{SPACE}%{INT:http.response.bytes}' }
        }
        date {
            match => [ "httpdate" , "dd/MMM/yyyy:HH:mm:ss Z" ]
        }
    }
    # WebLogic Server Log
    else if "weblogic-server-log" in [tags] {
        dissect {
         	mapping => {
                "message" => "####<%{ts}> <%{[clgx][wls][loglevel]}> <%{[clgx][wls][subsystem]}> <%{[clgx][wls][host]}> <%{[clgx][wls][server]}> <%{[clgx][wls][thread]}> <%{}> <%{[clgx][wls][transactionid]}> <%{[clgx][wls][diagcontid]}> <%{[clgx][wls][rawtime]}> <%{[clgx][wls][code]}>%{}"
          	}
        }
        date {
            # Nov 18, 2019 12:29:18 PM CST
            match => ["ts", "MMM dd, yyyy hh:mm:ss aa zzz"]
        }
    }
    else if "weblogic-stdout-log" in [tags] {
        #grok {
        #   match => [ "message", "<%{DATA:wls_timestamp}>%{SPACE}<%{LOGLEVEL:wls_level}>%{SPACE}<%{DATA:out_subsystem}>%{SPACE}<%{DATA:wls_code}>%{SPACE}<%{GREEDYDATA:out_message}" ]
        #}

        # Jun 24, 2020 8:35:04 AM com.fareis.encryption.impls.EncryptImpl decrypt
        dissect {
            mapping => {
                "message" => "%{+ts/2} %{+ts/3}, %{+ts/1} %{+ts/4}:%{+ts/5}:%{+ts/6} %{+ts/7} %{}"
            }
            add_tag => ["ts5","add_tz"]
        }

        if "_dissectfailure" in [tags] {
            mutate { remove_tag=> ["_dissectfailure"] }
            dissect {
                mapping => {
                    "message" => "<%{ts}> <%{[clgx][wls][loglevel]}> <%{[clgx][wls][subsystem]}> <%{[clgx][wls][code]}>%{}"
                }
            }
        }
        date {
            match => ["ts", "MMM dd, yyyy hh:mm:ss aa zzz"]
        }

        if  "add_tz" in [tags] {
            if [event][timezone] {
                mutate {
                    update => { 
                        "ts"=> "%{ts} %{[event][timezone]}" 
                    }
                }
            } else {
                mutate {
                    update => { 
                        "ts"=> "%{ts} UTC" 
                    }
                }
            }
        }
        date {
            match=>["ts",
                "MMM dd, yyyy hh:mm:ss aa zzz",
                "yyyy MMM d H:mm:ss a zzz",
                "yyyy MMM d H:mm:ss a"
            ]
            target => "@timestamp"
            locale => "en-US"
            timezone => "UTC"
        }

    }
    else if "osb-access-log" in [tags] {
        grok {
            match => { "message" => '%{SPACE}%{IP:client.ip}%{SPACE}-%{SPACE}-%{SPACE}\[%{HTTPDATE:httpdate}\]%{SPACE}"(?:%{WORD:http.request.method} %{NOTSPACE:url.path}(?: HTTP/%{NUMBER:http.version})?|%{DATA:rawrequest})"%{SPACE}%{INT:http.response.status_code}%{SPACE}%{INT:http.response.bytes}' }
        }
        date {
            match => [ "httpdate" , "dd/MMM/yyyy:HH:mm:ss Z" ]
        }
    }
    else if "osb-server-log" in [tags] {
# ####<Jun 18, 2020 5:06:53 PM CDT> <Debug> <RuntimeRouterCache> <taxqn1vswleap10> <esb10> <[ACTIVE] ExecuteThread: '7' for queue: 'weblogic.kernel.Default (self-tuning)'> <<anonymous>> <> <> <1592518013572> <BEA-000000> <2 hits received: 2 hits to main cache, 0 hits to soft cache, 0 misses.> 
        dissect {
            mapping => {
                "message" => "####<%{ts}> <%{[clgx][osb][loglevel]}> <%{[clgx][osb][module]}> <%{[clgx][osb][host]}> <%{[clgx][osb][component]}> %{}"
            }
        }
          date {
    	        # Nov 18, 2019 12:29:18 PM CST
            match => ["ts", "MMM dd, yyyy hh:mm:ss aa zzz"]
          }
    }
    else if "osb-console-log" in [tags] {
#  <Jun 23, 2020 11:52:21 AM CDT> <Error> <WliSbTransports> <BEA-381304> <Exception in...> 
        dissect {
            mapping => {
                "message" => "<%{ts}> <%{[clgx][osb][loglevel]}> <%{[clgx][osb][module]}> <%{[clgx][osb][component]}> %{}"
            }
        }
          date {
            match => ["ts", "MMM dd, yyyy hh:mm:ss aa zzz"]
        }
    }
    ###############################################    
    else if [agent][type]=="winlogbeat" {

    }
    ###############################################    
    else if [event][module]=="apache" {
    	# has ingest processor handle parse 
    }
    ###############################################    
    else if [event][module]=="iis" {
    	# has ingest processor handle parse 
    }
    ###############################################    
    else if "jboss-console-log" in [tags] {

    }
    ###############################################    
    #   Software Mind - R3
    else if "r3-web-client" in [tags] {
        # 2020-06-30 12:29:47,973   INFO    R3APP:c.c.b.t.o.d.r.c.s.i.ExecutionContextImpl || [clusterScheduler_Worker-5]   Resetting execution context
        grok {
            match => {
                "message" => 
                '^%{TIMESTAMP_ISO8601:ts}%{SPACE}+%{WORD:level}%{SPACE}(?<class>[a-zA-Z0-9.:]{1,})%{SPACE}\|\|%{SPACE}%{NOTSPACE:thread}%{GREEDYDATA:msg}'
            }
        }
        mutate {
            strip => ["ts","level","class","thread","msg"]
            gsub => [ "thread", "[\[\]]",""  ]
        }
        mutate {
            add_field => {
                "[clgx][r3][app_name]" => "R3"
                "[clgx][r3][level]" => "%{level}"
                "[clgx][r3][class]" => "%{class}"
                "[clgx][r3][thread]" => "%{thread}"
                "[clgx][r3][message]" => "%{msg}"  
            }          
        }
        mutate {
            remove_field => [ "app_name", "level", "class", "thread", "msg"]
        }
        # No timezone in field
        if [ts] {
            if [event][timezone] {
                mutate {
                    update => { 
                        "ts"=> "%{ts} %{[event][timezone]}" 
                    }
                }
            } else {
                mutate {
                    update => { 
                        "ts"=> "%{ts} UTC" 
                    }
                }
            }
            date {
                match => ["ts", "yyyy-MM-dd HH:mm:ss,SSS zzz", "ISO8601"]
                target => "@timestamp"
                locale => "en-US"
                timezone => "UTC"
            }
        }
    }
    ###############################################    
    #   Software Mind - owf
    else if ("owf-backend" in [tags]) or ("owf-frontend" in [tags]) {
        dissect {
            mapping => {
                    "message" => "%{+ts/1}-%{+ts/2}-%{+ts/3} %{+ts/4}:%{+ts/5}:%{+ts/6},%{+ts/7} %{thread} %{level} |%{msg}"
            }
        }
        if !("_dissectfailure" in [tags]) {
            mutate {
                add_field => {
                    "[clgx][owf][app_name]" => "OWF"
                    "[clgx][owf][level]" => "%{level}"
                    "[clgx][owf][thread]" => "%{thread}"
                    "[clgx][owf][message]" => "%{msg}"  
                }          
            }
            mutate {
                remove_field => [ "app_name", "level", "thread"]
            }
            csv {
                source => "msg"
                separator => "|"
                columns =>  ["part1","part2"]
            }
            mutate {
                strip => ["part1", "part2"]
            }

            # Test msg patterns
            # 2020-06-30 18:20:00,008 schedulerFactory_Worker-9 INFO  || com.corelogic.bis.tax.cis.ids.bpm.hibernate.statistics.HibernateCacheStatisticPrinter - QUERY cacheHitCount=0, cacheMissCount=0, cachePutCount=0, executionCount=3, executionRowCount=3, executionMaxTime=4, executionMinTime=2, totalExecutionTime=8, readLock=java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock@5b920196[Read locks = 0], writeLock=java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock@90b61a8[Unlocked], categoryName=FROM IdentificationProcessOrder o JOIN FETCH o.identificationProcessBatch b WHERE (o.identificationProcessOrderId=? AND (o.processOrderStatusCode IN(?,?,?,?,?,?,?,?,?,?)))
            dissect {
                mapping => {
                    "part2" => "%{class} - QUERY %{querystring}, readLock=%{}, writeLock=%{}, categoryName=%{categoryName}"
                }
            }
            if !("_dissectfailure" in [tags]) {
                kv { 
                    source => "querystring"
                    field_split => ", "
                    value_split => "="
                    target => "[clgx][owf]"
                }
                mutate {
                    rename => { 
                        "categoryName"=>"[clgx][owf][categoryName]" 
                        "class"=>"[clgx][owf][class]" 
                    }
                    remove_field => ["querystring"]
                    convert => {
                      "[clgx][owf][cacheMissCount]" => "integer"
                      "[clgx][owf][executionCount]" => "integer"
                      "[clgx][owf][executionRowCount]" => "integer"
                      "[clgx][owf][executionMaxTime]" => "integer"
                      "[clgx][owf][cachePutCount]" => "integer"
                      "[clgx][owf][cacheHitCount]" => "integer"
                      "[clgx][owf][totalExecutionTime]" => "integer"
                      "[clgx][owf][executionMinTime]" => "integer"
                    }
                }
            } else {
                 mutate { remove_tag=> ["_dissectfailure"] }

            # 2020-06-30 14:17:01,281 inboundConsumers-8 INFO  |AAC:238595669 EXB_TYP:BATCH ORD:41692924 TYP:PTI UID:LegacyBridge REQ:105301629| com.corelogic.bis.tax.cis.ids.bpm.util.task.TaskManagerOperationsUtil - Initial processing of TaskManager Process completed for packageId=40547831, task=43447681 processId=2899477256
            # 2020-06-30 18:55:43,731 otherConsumers-4 INFO  |AAC:238596066 ORD:41693094 TYP:PTI UID:LegacyBridge WPK:40547971 REQ:105301824| com.corelogic.bis.tax.cis.ids.util.SimonUtil.TMR - Job.internal.executeJob 112
            # 2020-06-30 13:25:48,112 http-nio-10.208.180.62-10100-exec-14 INFO  |JSID:9FF947F42A3403447DC1A2A2F00A583F TSK:43443362 UID:ppalus REQ:105096787| com.corelogic.bis.tax.cis.ids.util.SimonUtil.TMR - Request.identification-task-work.xhtml.bottomTaskList_selectingCurrentTaskOnTaskListAndStoringBeginTimestamp 1092
            # 2020-06-30 18:30:39,066 quartzJobsConsumers-1 WARN  |TSK:43169930 REQ:11899_3000369931| com.corelogic.bis.tax.cis.ids.scheduling.TaskRemainingInPendProcessor - Replication is PT1481H15M15.430S behind for task 43169930

                kv { 
                    source => "part1"
                    value_split => ":"
                    target => "[clgx][owf]"
                }
                if !("_kv_filter_error" in [tags]) {
                     mutate { 
                        remove_field => ["part1"]
                        convert => {
                          "[clgx][owf][AAC]" => "integer"
                          "[clgx][owf][ORD]" => "integer"
                          "[clgx][owf][WPK]" => "integer"
                          "[clgx][owf][TSK]" => "integer"
                        }
                     }
                }
                mutate {
                    rename => { "part2"=>"[clgx][message]" }
                }
            }
            # No timezone in field
            if [ts] {
                if [event][timezone] {
                    mutate {
                        update => { 
                            "ts"=> "%{ts} %{[event][timezone]}" 
                        }
                    }
                } else {
                    mutate {
                        update => { 
                            "ts"=> "%{ts} UTC" 
                        }
                    }
                }
                date {
                    match => ["ts", "yyyy-MM-dd HH:mm:ss,SSS zzz", "ISO8601"]
                    target => "@timestamp"
                    locale => "en-US"
                    timezone => "UTC"
                }
            }
        }
    }
    ##### END SOFTWARE MIND SECTION ####### 
    ############################################### 
    else {
    #  General purpose logs
    #
    # Parse timestamps
    #    Filebeat regexes for identifing multiline messages
    #    - '^[\S+] \w+ \w+ \d+ \d{2}:\d{2}:\d{2} \w+ \d+'
    #    - '^<\w+ \d+, \d{4} \d+:\d{2}:\d{2} (AM|PM) \w+>'
    #    - '^\w{3} \d{2}, \d{4} \d+:\d+:\d+ (AM|PM)'
    #    - '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d+'
    #

    #  dissect created variable date variables. Reduce to these formats:
    #     POSITION:    1    2   3 4  5  6  7  
    #     ts1: format  yyyy MMM d HH mm ss zzz
    #
    #     POSITION:    1    2   3 4 5  6  7 8  
    #     ts2: format  yyyy MMM d H mm ss a zzz 
    #
    #     POSITION:    1    2   3 4  5  6  7   
    #     ts3: format  yyyy MM dd HH mm ss SSS
    #
    #     POSITION:    1    2   3 4 5  6  7  
    #     ts4: format  yyyy MMM d H mm ss a
    #
    #		dissect ref: https://www.elastic.co/guide/en/logstash/current/plugins-filters-date.html
    #		date ref: https://www.elastic.co/guide/en/logstash/current/plugins-filters-date.html

    # [Thread-0] Wed Jun 10 00:40:02 CDT 2020[DEBUG]
        dissect {
            mapping => {
                # "#message" => "[%{}] %{} %{ts_MMM} %{ts_d} %{ts_HH}:%{ts_mm}:%{ts_ss} %{ts_zzz} %{ts_yyyy}[%{}"
                # "message" => "[%{}] %{} %{+ts1/2} %{+ts1/3} %{+ts1/4}:%{+ts1/5}:%{+ts1/6} %{+ts1/7} %{+ts1/1}[%{}"
                "message" => "[%{}] %{} %{+ts/2} %{+ts/3} %{+ts/4}:%{+ts/5}:%{+ts/6} %{+ts/7} %{+ts/1}[%{}"
            }
            add_tag => ["ts1"]
        }
        if "_dissectfailure" in [tags] {
            mutate { remove_tag=> ["_dissectfailure"] }
            # <Jun 10, 2020 12:41:23 AM CDT>	
            dissect {
                mapping => {
                    # "message" => "<%{ts_MMM} %{ts_d}, %{ts_yyyy} %{ts_H}:%{ts_mm}:%{ts_ss} %{ts_a} %{ts_zzz}>%{}"
                    # "message" => "<%{+ts2/2} %{+ts2/3}, %{+ts2/1} %{+ts2/4}:%{+ts2/5}:%{+ts2/6} %{+ts2/7} %{+ts2/8}>%{}"
                    "message" => "<%{+ts/2} %{+ts/3}, %{+ts/1} %{+ts/4}:%{+ts/5}:%{+ts/6} %{+ts/7} %{+ts/8}>%{}"
                }
                add_tag => ["ts2"]
            }
        }
        if "_dissectfailure" in [tags] {
            mutate { remove_tag=> ["_dissectfailure"] }
            # exception dissect pattern - doesn't match date only t3 pattern 
            # 2020-06-10 00:42:30,886 ERROR com.fareis.configuration.error.LoggingErrorHandler  - Problem while trying to read configuration. Returning new configuration
            dissect {
                mapping => {
                    "message" => "%{+ts/1}-%{+ts/2}-%{+ts/3} %{+ts/4}:%{+ts/5}:%{+ts/6},%{+ts/7} %{}  %{} - %{}"
                }
                add_tag => ["ts3a","add_tz"]
            }
        }

        if "_dissectfailure" in [tags] {
            mutate { remove_tag=> ["_dissectfailure"] }
            # 2020-06-10 11:24:17,793 	
            dissect {
                mapping => {
                    # "message" => "%{ts_yyyy}-%{ts_MM}-%{ts_dd} %{ts_HH}:%{ts_mm}:%{ts_ss},%{ts_SSS} %{}"
                    # "message" => "%{+ts3/1}-%{+ts3/2}-%{+ts3/3} %{+ts3/4}:%{+ts3/5}:%{+ts3/6},%{+ts3/7} %{}"
                    "message" => "%{+ts/1}-%{+ts/2}-%{+ts/3} %{+ts/4}:%{+ts/5}:%{+ts/6},%{+ts/7} %{}"
                }
                add_tag => ["ts3","add_tz"]
            }

        }

        if "_dissectfailure" in [tags] {
            mutate { remove_tag=> ["_dissectfailure"] }
            # Jun 10, 2020 3:04:00 AM com.fareis	
            dissect {
                mapping => {
                    # "message" => "%{ts_MMM} %{ts_d}, %{ts_yyyy} %{ts_H}:%{ts_mm}:%{ts_ss} %{ts_a} %{}"
                    # "message" => "%{+ts4/2} %{+ts4/3}, %{+ts4/1} %{+ts4/3}:%{+ts4/5}:%{+ts4/6} %{+ts4/7} %{}"
                    "message" => "%{+ts/2} %{+ts/3}, %{+ts/1} %{+ts/4}:%{+ts/5}:%{+ts/6} %{+ts/7} %{}"
                }
                add_tag => ["ts4","add_tz"]
            }

        }	
        # match these date formats
        #1  2020 Jun 1 00:40:02 CDT
        #2  2020<Jun 1 12:41:23 AM CDT   
        #2  2020<May 4 3:05:59 AM CDT
        #3  2020-06-10 02:35:22,142
        #3  2020 Jun 10 00:40:02 CDT
        #4  2020 Jun 10 3:04:00 AM
        #4  2020 Jun 1 3:04:00 AM

        if [ts] {
            # If no timezone in log or fb event, the set UTC as default
            if  "add_tz" in [tags] {
                if [event][timezone] {
                    mutate {
                        update => { 
                            "ts"=> "%{ts} %{[event][timezone]}" 
                        }
                    }
                } else {
                    mutate {
                        update => { 
                            "ts"=> "%{ts} UTC" 
                        }
                    }
                }
            }
            date {
                match=>["ts",
                    "yyyy MMM d HH:mm:ss zzz",
                    "yyyy<MMM d H:mm:ss a zzz",
                    "yyyy-MM-dd HH:mm:ss,SSS zzz",
                    "yyyy-MM-dd HH:mm:ss,SSS ",
                    "yyyy MMM dd HH:mm:ss zzz",
                    "yyyy MMM d H:mm:ss a zzz",
                    "yyyy MMM d H:mm:ss a"
                ]
                target => "@timestamp"
                locale => "en-US"
                timezone => "UTC"
            }
            # catch dissect misses.
            if "_dateparsefailure" in [tags] {
                mutate { 
                    remove_tag=> ["_dateparsefailure"] 
                    add_tag => ["grok_tz"]
                }
                # May 13, 2020 12:11:25 AM weblogic.wsee.jaxws.spi.WLSServiceDelegate addWsdlDefinitionFeature
                grok {
                    match => [ "message", '^(?<tsm>\w{3} \d+, \d{4} \d+:\d{2}:\d{2} (AM|PM)) ' ]
                }
                mutate {
                    update => { 
                        "tsm"=> "%{tsm} %{[event][timezone]}" 
                    }
                }
                date {
                    match => ["tsm", "MMM d, yyyy hh:mm:ss a zzz"]
                    target => "@timestamp"
                }

            }
        }
        ###############################################
    } 
}

output
{
    if [@metadata][pipeline] {
        elasticsearch {
            hosts => ["https://d351b9fa1d2a47cbb06501c2a02d6b52.int-ece-main-green-proxy.mla.int.idap.clgxdata.com:9243"]
            user => "clgx_service"
            password => "clgx_service_r0ck$"
            ilm_rollover_alias => "logs-tax_us"
            ilm_pattern => "000001"
            ilm_policy => "filebeat"
            ilm_enabled => true
            pipeline => "%{[@metadata][pipeline]}"
        }
    } else {
        elasticsearch {
            hosts => ["https://d351b9fa1d2a47cbb06501c2a02d6b52.int-ece-main-green-proxy.mla.int.idap.clgxdata.com:9243"]
            user => "clgx_service"
            password => "clgx_service_r0ck$"
            ilm_rollover_alias => "logs-tax_us"
            ilm_pattern => "000001"
            ilm_policy => "filebeat"
            ilm_enabled => true
        }
    }
}
