# Using syslog input, NOT filebeat cloudfoundry module

input {
    pipeline { 
        address => "main-pcf-int-logs-filter-output-pipeline-flood_us"
        id => "main-pcf-int-logs-filter-output-pipeline-flood_us"
    }
}

filter {
    mutate {
        add_field => { 
            "[labels][org]" => "flood_us"
            "[labels][space]" => "Flood"
            "[labels][environment]" => "logging-np"
            "index" => "logs-flood_us"
            "[cloudfoundry][org][name]" => "%{[sd][organization_name]}"
            "[cloudfoundry][org][id]" => "%{[sd][organization_id]}"
            "[cloudfoundry][space][id]" => "%{[sd][space_id]}"
            "[cloudfoundry][space][name]" => "%{[sd][space_name]}"
            "[cloudfoundry][app][name]" => "%{[sd][app_name]}"
            "[cloudfoundry][app][id]" => "%{[sd][app_id]}"
            "[cloudfoundry][envelope][deployment]" => "%{[sd][deployment]}"
            "[cloudfoundry][envelope][origin]" => "%{[sd][origin]}"
            "[cloudfoundry][envelope][ip]" => "%{[sd][ip]}"
            "[cloudfoundry][envelope][index]" => "%{[sd][index]}"
            "[cloudfoundry][envelope][job]" => "%{[sd][job]}"
            "[cloudfoundry][log][source][type]" => "%{[sd][source_type]}"
            "[cloudfoundry][log][source][instance]" => "%{[sd][instance_id]}"
            "[cloudfoundry][type]" => "%{[sd][process_type]}"
        }
    }

    # ONLY FOR SYSLOG! - setting host to string, filebeat template is expecting object
    if [host] {
        mutate {
            rename => {"host" => "[host][name]" }
        }
    }

    if [agent] {
        mutate {
            rename => {"agent" => "[agent][name]" }
        }
    }

    if [os] {
        mutate {
            rename => {"os" => "[os][name]" }
        }
    }

    ##
    if [syslog5424_msg] {
        dissect {
            mapping => {
                "syslog5424_msg" => "%{} fcsoap.STATS : [%{fcsoap_stats}] cf.space_name=%{[cf][space_name]}, cf.application_name=%{[cf][application_name]}, reqid=%{reqid}"
            }      
        }
        # "fcsoap_stats" => "|svr=|svc=FC:H1:SN|time=0.03|ver=2.4|req=STATUS_QUERY|res=S_IN_RESEARCH|user=MIG-252127|acct=MIG-252127|src=IS|ptl=|pdf=T|prod=|fcn=2004C23241|loan=|"
        kv {
            source => "fcsoap_stats"
            target => "fcsoap_stats"
            field_split => "|"
            value_split => "="
        }
        mutate {
            convert => {
                "[fcsoap_stats][time]" => "float"
            }
        }
        if "_dissectfailure" in [tags] {
            mutate {
                remove_tag => ["_dissectfailure"]
            }
            dissect {
                mapping => {
                    "syslog5424_msg" => "%{} FC_SERVICE : output=<RESPONSE_GROUP %{xml_string}</RESPONSE_GROUP>%{}"
                }      
            }
            if !("_dissectfailure" in [tags]) {
                mutate {
                    replace => {
                        "xml_string" => "<RESPONSE_GROUP %{xml_string}</RESPONSE_GROUP>"
                    }
                }     
            }
            else {
                mutate {
                    remove_tag => ["_dissectfailure"]
                }       
                dissect {
                    mapping => {
                        "syslog5424_msg" => "%{} request pre-transform (%{}):<REQUEST_GROUP %{xml_string}</REQUEST_GROUP>%{}"
                    }      
                }
                if !("_dissectfailure" in [tags]) {
                    mutate {
                        replace => {
                        "xml_string" => "<REQUEST_GROUP %{xml_string}</REQUEST_GROUP>"
                        }
                    }
                } else {
                    mutate {
                        remove_tag => ["_dissectfailure"]
                    }                 
                }
            }
            if [xml_string] {
                xml {
                source => "xml_string"
                target => "xml"
                force_array => false
                force_content => true
                }
            }
        }   
    }

}
output
{
  # Output to logging-np
  elasticsearch {
    hosts => ["http://clgx_service:clgx_service_r0ck$@aeaf5b5bec0943de9aff781f7c6becd8.int-ece-main-green-proxy.mla.int.idap.clgxdata.com:9200"]
    ilm_rollover_alias => "logs-flood_us_rollover_alias"
    ilm_pattern => "000001"
    ilm_policy => "prod_policy"
    ilm_enabled => true
  }
}

